#ifndef LAGER_COMMON_LETTER_COORDINATES_H
#define LAGER_COMMON_LETTER_COORDINATES_H

#include "spherical_coordinates.h"
#include <unordered_map>

std::unordered_map<char, struct SphericalCoordinates> letter_coordinates =
	// Format: {'<LETTER>', {<PHI>,<THETA>}}
	// A is the top face (pole), Z is the bottom face (pole)
	// They repeat on each plane

  {{'a', {0,   0}}, {'a', {45,  0}}, {'a', {90,  0}},
   {'a', {135, 0}}, {'a', {180, 0}}, {'a', {225, 0}},
   {'a', {270, 0}}, {'a', {315, 0}}, {'a', {360, 0}},

   {'b', {0,   45}}, {'c', {45,  45}}, {'d', {90,  45}},
   {'e', {135, 45}}, {'f', {180, 45}}, {'g', {225, 45}},
   {'h', {270, 45}}, {'i', {315, 45}}, {'b', {360, 45}},

   {'j', {0,   90}}, {'k', {45,  90}}, {'l', {90,  90}},
   {'m', {135, 90}}, {'n', {180, 90}}, {'o', {225, 90}},
   {'p', {270, 90}}, {'q', {315, 90}}, {'j', {360, 90}},

   {'r', {0,   135}}, {'s', {45,  135}}, {'t', {90,  135}},
   {'u', {135, 135}}, {'v', {180, 135}}, {'w', {225, 135}},
   {'x', {270, 135}}, {'y', {315, 135}}, {'r', {360, 135}},

   {'z', {0,   180}}, {'z', {45,  180}}, {'z', {90,  180}},
   {'z', {135, 180}}, {'z', {180, 180}}, {'z', {225, 180}},
   {'z', {270, 180}}, {'z', {315, 180}}, {'z', {360, 180}},

   {'v', {0,   225}}, {'w', {45,  225}}, {'x', {90,  225}},
   {'y', {135, 225}}, {'r', {180, 225}}, {'s', {225, 225}},
   {'t', {270, 225}}, {'u', {315, 225}}, {'v', {360, 225}},

   {'n', {0,   270}}, {'o', {45,  270}}, {'p', {90,  270}},
   {'q', {135, 270}}, {'r', {180, 270}}, {'s', {225, 270}},
   {'t', {270, 270}}, {'u', {315, 270}}, {'n', {360, 270}},

   {'f', {0,   315}}, {'g', {45,  315}}, {'h', {90,  315}},
   {'i', {135, 315}}, {'j', {180, 315}}, {'k', {225, 315}},
   {'l', {270, 315}}, {'m', {315, 315}}, {'f', {360, 315}},

   {'a', {0,   360}}, {'a', {45,  360}}, {'a', {90,  360}},
   {'a', {135, 360}}, {'a', {180, 360}}, {'a', {225, 360}},
   {'a', {270, 360}}, {'a', {360, 360}}, {'a', {360, 360}}};

#endif /* LAGER_COMMON_LETTER_COORDINATES_H */
